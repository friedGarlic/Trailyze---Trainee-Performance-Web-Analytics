@model ML_ASP.Models.ViewModel.SubmissionVM

@{
    Layout = "_AMasterPage_3";
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons+Sharp" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
    <link rel="stylesheet" href="~/css/styleDashboard.css">
    <title>Responsive Dashboard Design #1 | AsmrProg</title>
</head>

<body>

    <div class="container">
        <!-- Sidebar Section -->
        <aside>
            <div class="sidebar">
                <a asp-controller="FileManagement" asp-action="FileManagement">
                    <span class="material-symbols-outlined">
                        topic
                    </span>
                    <h2>Files</h2>
                </a>
                <a href="#" class="active">
                    <span class="material-symbols-outlined">
                        analytics
                    </span>
                    <h2>Prediction</h2>
                </a>
                @* <a href="#">
                    <span class="material-symbols-outlined">
                        mail
                    </span>
                    <h2>Mails</h2>
                    <span class="message-count">3</span>
                </a> *@
                <a href="#">
                    <span class="material-symbols-outlined">
                        logout
                    </span>
                    <h2></h2>
                </a>
            </div>
        </aside>
        <!-- End of Sidebar Section -->
        <!-- Main Content -->
        <main>
            <h1>Analytics</h1>
            <!-- Analyses -->
            <div class="analyse">
                <div class="hrs-remaining">
                    <div class="status">
                        <div class="info">
                            <h3>Required Hours</h3>
                            <h1 id="countdownRemaining"> @ViewBag.RemainingHours : @ViewBag.RemainingMinutes : @ViewBag.RemainingSeconds</h1>
                        </div>
                        <div class="progress">
                            <svg>
                                <circle cx="38" cy="40" r="36"></circle>
                            </svg>
                        </div>
                    </div>
                </div>
                <div class="hrs-completed">
                    <div class="status">
                        <div class="info">
                            <h3>Hours Completed</h3>
                            <h1 id="countdown"> @ViewBag.HoursCompleted : @ViewBag.MinutesCompleted : @ViewBag.SecondsCompleted</h1>
                        </div>
                        <div class="progress">
                            <svg>
                                <circle cx="38" cy="40" r="36"></circle>
                            </svg>
                        </div>
                    </div>
                </div>
                <div class="task-completed">
                    <div class="status">
                        <div class="info">
                            <h3>Task Completed</h3>
                            <h1>@ViewBag.SubmissionCount Submission</h1>
                        </div>
                        <div class="progress">
                            <span class="material-symbols-outlined">
                                task
                            </span>
                        </div>
                    </div>
                </div>
                <div class="task-completed">
                    <div class="status">
                        <div class="info">
                            <h3>Total Report Required</h3>
                            <h1>@ViewBag.RemainingReports Weekly Report</h1>
                        </div>
                        <div class="task-progress">
                            <span class="material-symbols-outlined">
                                pending
                            </span>
                        </div>
                    </div>
                </div>

            </div>
            <!--end of task analytics-->

            <div class="charts">
                <h2> Performance Progress</h2>
                <p> By Week</p>
                <div class="pulse"></div>
                <div class="chart-area">
                    <div class="grid"></div>
                </div>
            </div>
            <!-- End of Analyses -->
            
            <!-- Recent Orders Table -->
            <div class="recent-orders">
                <h2>Recent Log In's</h2>
                <table>
                    <thead>
                        <tr>
                            <th class="p-4">FullName</th>
                            <th class="p-4">DateTime</th>
                            <th class="p-4">Log Status</th>
                            <th class="p-4">Evidence</th>
                            <th class="p-4">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var i in Model.LogList)
                        {
                            <tr>
                                <td class="p-4">
                                    @i.FullName
                                </td>
                                <td class="p-4">
                                    @i.DateTime
                                </td>
                                <td class="p-4">
                                    @i.Log
                                </td>
                                <td>
                                    @if (i.LogImageUrl == null)
                                    {
                                        <form method="post" enctype="multipart/form-data" asp-controller="FileManagement" asp-action="UploadImage" asp-route-id="@i.Id">
                                            <input type="file" name="file" multiple />
                                            <input type="submit" value="Upload" />
                                            <span style="color:green">@Html.Raw(ViewBag.Message)</span>
                                        </form>
                                    }
                                    else
                                    {
                                        @i.LogImageUrl
                                    }
                                </td>
                                <td><a href="../FileManagement/ViewImage?fileName=@i.LogImageUrl" target="_blank" style="margin-bottom: 2px;">View</a>
                                    <form id="approvalForm" method="post" asp-controller="FileManagement" asp-action="DeleteFile" asp-route-id="@i.Id">
                                        <input type="hidden" name="fileName" value="@i.LogImageUrl" />
                                        <button class="btn btn-secondary" id="deleteButton" type="button">Delete</button>
                                    </form>
                                </td>
                                <td>
                                    
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <!-- End of Recent Orders -->

        </main>
        <!-- End of Main Content --> 
        <!-- Right Section --> 
                        @* --------------NEED FIX TO BECOME PARTIAL VIEW AND NOT INLCUDE IN EVERY VIEW *@
        <div class="right-section">
            <div class="nav">
                <div class="profile">
                    <div class="button">
                        <!-- reverse pyschology of default returns in toggle buttons see controller for and put debug break to understand -->
                        <form method="post" id="toggleForm" asp-action="Dashboard" asp-controller="Dashboard">
                            @if (Model.TimeLog == "Timed In" || ViewBag.InitialIsTimedIn == true)
                            {
                                <label class="toggle-container" for="IsTimedIn">
                                    <input type="checkbox" class="toggle-input" id="IsTimedIn" name="IsTimedIn" value="true">
                                    <span class="toggle-slider on"></span>
                                </label>
                                <script>
                                    let isChecked = true;
                                    localStorage.setItem('isChecked', isChecked.toString());
                                </script>
                                return;
                            }
                            @if (Model.TimeLog != "Timed In" || ViewBag.InitialIsTimedIn == false)
                            {
                                <label class="toggle-container" for="IsTimedIn">
                                    <input type="checkbox" class="toggle-input" id="IsTimedIn" name="IsTimedIn" value="false">
                                    <span class="toggle-slider"></span>
                                </label>
                                <script>
                                    @* some genius and dumbshit added just to let it run because of both toggle button id is timedin *@
                                    let isChecked = false;
                                    localStorage.setItem('isChecked', isChecked.toString());
                                </script>
                                return;
                            }
                        </form>
                        <!-- TIME LOG TOGGLE BUTTON ENDS -->
                    </div>
                    <div class="info">
                        <h3>Welcome, <b>@ViewBag.AccountName</b></h3>
                        <small class="text-muted">Trainee</small>
                    </div>
                    <div class="profile-photo">
                        <img src="images/profile-1.jpg">
                    </div>
                </div>

            </div>
            <!-- End of Nav -->

            <div class="reminders">
                <div class="header">
                    <h2>Reminders</h2>
                    <span class="material-icons-sharp">
                        notifications_none
                    </span>
                </div>
                @foreach(var i in Model.ReminderList) // if theres an error here that means your not passing the ReminderList obj
                {
                    <div class="notification" id="reminder-@i.Id">
                        <div class="icon">
                            <span class="@i.IconClass"> <!-- changes for icon -->
                                @i.IconType
                            </span>
                        </div>
                        <div class="content">
                            <div class="info">
                                <h3>@i.Name</h3>
                                <small class="text_muted">
                                    @i.ReminderDateTime
                                </small>
                            </div>
                            <span class="material-icons-sharp">
                                more_vert

                                <form method="post" asp-controller="Dashboard" asp-action="DeleteReminder" asp-route-id="@i.Id">
                                    <button type="submit">Delete</button>
                                </form>
                            </span>
                        </div>
                    </div>
                    
                }
                <div class="notification add-reminder" onclick="showInputPopup()">
                    <div>
                        <span class="material-icons-sharp">
                            add
                        </span>
                        <h3>Add Reminder</h3>
                    </div>
                </div>

                <!-- Reminder element -->
                <div id="reminder-1" style="display: none;">Reminder: Don't forget to do something!</div>
                
            </div>
        </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
        let countdownInterval;

        document.getElementById("IsTimedIn").addEventListener("click", function () {
            startCountdown();

            var slider = document.querySelector(".toggle-slider");
            slider.classList.toggle("on");
            document.getElementById("toggleForm").submit();
        });
        
        function startCountdown() {

            let sc = parseInt("@ViewBag.SecondsCompleted");
            let mc = parseInt("@ViewBag.MinutesCompleted");
            let hc = parseInt("@ViewBag.HoursCompleted");


            let rs = parseInt("@ViewBag.RemainingSeconds");
            let rm = parseInt("@ViewBag.RemainingMinutes");
            let rh = parseInt("@ViewBag.RemainingHours");

            let totalInitialSeconds = (hc * 3600) + (mc * 60) + sc;
            let totalInitialSecondsRemaining = (rh * 3600) + (rm * 60) + rs;

            countdownInterval = setInterval(() => {
                totalInitialSeconds++;
                totalInitialSecondsRemaining--;

                let newHours = Math.floor(totalInitialSeconds / 3600);
                let newMinutes = Math.floor((totalInitialSeconds % 3600) / 60);
                let newSeconds = totalInitialSeconds % 60;

                let newHoursRemaining = Math.floor(totalInitialSecondsRemaining / 3600);
                let newMinutesRemaining = Math.floor((totalInitialSecondsRemaining % 3600) / 60);
                let newSecondsRemaining = totalInitialSecondsRemaining % 60;

                // Update the countdown displayed on the HTML element
                document.getElementById('countdown').innerText = `${newHours}: ${newMinutes}: ${newSeconds}`;
                document.getElementById('countdownRemaining').innerText = `${newHoursRemaining}: ${newMinutesRemaining}: ${newSecondsRemaining}`;

            }, 1000);
        } 

        function stopCountdown() {
            clearInterval(countdownInterval);
        }

        document.addEventListener("DOMContentLoaded", function () {
            if (isChecked) {
                startCountdown();
            } else {
                stopCountdown();
            }

        });

        function playNotificationSound() {
            var audio = new Audio("/assets/ararm.mp3");
            audio.play();
        }
    </script>
    <script>
        function showInputPopup() {
            Swal.fire({
                title: 'Add Reminder',
                html:
                    '<div class="icon">' +
                    '<input type="radio" name="material-icons-sharp" id="radio1" class="radio">' +
                    '<label for="radio1" class="material-icons-sharp" style="font-size:50px;margin-right: 25px;">groups</label>' +

                    '<input type="radio" name="material-icons-sharp" id="radio2" class="radio">' +
                    '<label for="radio2" class="material-icons-sharp" style="font-size:50px;margin-right: 25px;">task</label>' +

                    '<input type="radio" name="material-icons-sharp" class="radio">' +
                    '<label for="radio3" class="material-icons-sharp" style="font-size:50px;">devices</label>' +
                    '</div>' +
                    '<input id="swal-input2" type="datetime-local" class="swal2-input" placeholder="Select Date and Time">' +
                    '<input id="swal-input1" class="swal2-input" placeholder="Name of reminder">',
                showCancelButton: true,
                confirmButtonText: 'Submit',
                cancelButtonText: 'Cancel',
                preConfirm: () => {
                    const iconType = Swal.getPopup().querySelector('input[name="material-icons-sharp"]:checked + label').textContent.trim();
                    const nameOfReminder = Swal.getPopup().querySelector('#swal-input1').value;
                    const iconClass = Swal.getPopup().querySelector('input[name="material-icons-sharp"]:checked + label').getAttribute('class');
                    const dateTime = Swal.getPopup().querySelector('#swal-input2').value;
                    // perform validation or additional processing here
                    return { nameOfReminder: nameOfReminder, iconType: iconType, iconClass: iconClass , dateTime: dateTime};
                },
                allowOutsideClick: () => !Swal.isLoading()
            }).then((result) => {
                if (result.isConfirmed) {
                    // data to the controller using AJAX
                    sendDataToController(result.value);
                    location.reload();
                }
            });
        }

        function sendDataToController(data) {
            $.ajax({
                url: '/Dashboard/AddReminder',
                type: 'POST',
                dataType: 'json',
                data: data,
                success: function (response) {
                    location.reload();
                },
                error: function (error) {
                    console.error(error);
                }
            });
        }
    </script>
    <script> 
        let gradeData = [
        @foreach (var grade in Model.GradeList)
        {
            <text>@Html.Raw(Json.Serialize(grade)), </text>
        }
        ];

        const chartOptions = {
            chart: {
                type: 'area',
                height: 280,
                toolbar: { show: false },
                zoom: { enable: false }
            },
            colors: ['#3498db'],
            series: [{ name: 'Grade', data: gradeData }],
            dataLabels: { enable: false },
            stroke: { width: 5, curve: 'smooth' },
            fill: {
                type: 'gradient',
                gradient: {
                    shadeIntensity: 1,
                    opacityFrom: 0.7,
                    opacityTo: 0,
                    stops: [0, 90, 100]
                }
            },
            xaxis: {
                categories: ['Week 1', 'Week 2', 'Week 3', 'Week 4'],
                axisBorder: { show: false },
                labels: { style: { colors: '#a7a7a7', fontFamily: 'system-ui' } }
            },
            yaxis: { show: false },
            grid: { borderColor: 'rgba(0,0,0,0)', padding: { top: -30, bottom: -8, left: 12, right: 12 } },
            tooltip: {
                disable: true,
                y: { formatter: value => '${value}K' },
                style: { fontFamily: 'system-ui' }
            },
            markers: { show: false }
        };

        const chart = new ApexCharts(document.querySelector('.chart-area'), chartOptions);
        chart.render();
    </script>
    <script>
        flatpickr("input[type=datetime-local]", {
            enableTime: true,
            dateFormat: "Y-m-d H:i",
            altInput: true,
            altFormat: "F j, Y (h:S K)",
            minDate: "today", 
            minTime: "8:00",
            maxTime: "17:00", 
            parseDate: (datestr, format) => {
                return moment(datestr, format, true).toDate();
            },
        });
    </script>
    <script>
        var lowestReminderDuration = @Model.ReminderList.Min(i => i.ReminderDuration);

        setTimeout(function () {
            var reminderElement = document.getElementById("reminder-1");

            if (reminderElement) {
                reminderElement.style.display = "block";
                playNotificationSound();
            }
        }, lowestReminderDuration);
    </script>
    <script>
        document.getElementById('deleteButton').addEventListener('click', function () {
            confirmDelete();
        });

        function confirmDelete() {
            Swal.fire({
                title: "Are you sure?",
                text: "This action cannot be undone!",
                icon: "warning",
                showCancelButton: true,
                confirmButtonColor: "#3085d6",
                cancelButtonColor: "#d33",
                confirmButtonText: "Yes, delete it!"
            }).then((result) => {
                if (result.isConfirmed) {
                    // Manually trigger the form submission
                    document.getElementById('approvalForm').submit();
                    location.reload();
                }
            });
        }
    </script>
</body>
</html>

@section Scripts{

    @* scripts for getting the camera for scanning qr code
    <div>
                <video id="preview" width="100%"></video>
            </div>
            <div>
                <label>scan qr code</label>
                <input type="text" name="text" id="text" readonly="" placeholder="scan qrcode" class="form-control" />
   </div>

    <script type="text/javascript" src="https://rawgit.com/schmich/instascan-builds/master/instascan.min.js"
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.1.10/vue.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/webrtc-adapter/3.3.3/adapter.min.js"></script>
    <script>
        // Initialize Instascan
        let scanner = new Instascan.Scanner({ video: document.getElementById('preview') });

        Instascan.Camera.getCameras().then(function (cameras) {
            if (cameras.length > 0) {
                scanner.start(cameras[0]);
            } else {
                console.error('No cameras found.');
            }
        }).catch(function (error) {
            console.error(error);
        });
        // Add listener for when a QR code is scanned
        scanner.addListener('scan', function (content) {
            // Perform any actions with the scanned data (e.g., send to server)
            // For demonstration purposes, we'll simply display the scanned data
            document.getElementById('text').value = content;
        });

        // Start scanning *@

    </script>
}